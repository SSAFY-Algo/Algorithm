package com.ssafy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class BOJ_2178_미로탐색_200814 {

	static int N, M;
	static int[][] map;
	static boolean[][] visit;
	static LinkedList<Point> q;
	static int[][] ans;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];
		ans = new int[N][M];
		visit = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			char[] c = br.readLine().toCharArray();
			for (int j = 0; j < M; j++) {
				map[i][j] = c[j] - '0';
			}
		}
		q = new LinkedList<Point>();
		visit[0][0] = true;
		q.offer(new Point(0, 0, 1));
		bfs();
		System.out.println(ans[N - 1][M - 1]);
	}

	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };

	public static void bfs() {
		while (!q.isEmpty()) {
			Point now = q.poll();
			ans[now.x][now.y] = now.cnt;
			for (int i = 0; i < 4; i++) {
				int nx = now.x + dr[i];
				int ny = now.y + dc[i];

				if (nx < 0 || ny < 0 || nx >= N || ny >= M)
					continue;
				if (map[nx][ny] == 1) {
					if (visit[nx][ny] == false) {
						q.offer(new Point(nx, ny, now.cnt + 1));
						visit[nx][ny] = true;
					}
				}
			}
		}
	}

	static class Point {
		int x;
		int y;
		int cnt;

		public Point(int x, int y, int cnt) {
			this.x = x;
			this.y = y;
			this.cnt = cnt;
		}

	}
}
